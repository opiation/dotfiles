#+TITLE: My machine life

The purpose of this document is to having a living document of all my machine configurations in a single, navigable Org-mode file that can be tangled in multiple ways to produce all the system configuration files needed to have a consistent environment, wherever I go.

* Alacritty configuration
* Emacs configuration
:PROPERTIES:
:header-args: :result silent :tangle "./my-emacs-config.el"
:END:

Emacs is a highly configurable editor. Given the capabilities of Emacs Lisp (terminal emulation, remote access, directory editor, etc...), some might argue that Emacs can fill most system needs with enough configuration and extension. This configuration in particular is aimed at providing defaults that are reasonably intuitive to people coming from newer editors like VS Code but with much greater extension and performance.

** Mandatory header

When creating writing to files in Emacs Lisp, it's a good practice for them to include a comment header and footer. This header gives a small preamble about what the reader should expect in the contained source code and its intended purpose.

As this is intended to be an Emacs config, its purpose is straightforward but feel free to personalize this to your liking.

#+BEGIN_SRC elisp

  ;;; MyInit --- A decent Emacs config for devs in a VS Code era...
  ;;;
  ;;; This Emacs configuration was generated by My Machine Life
  ;;;
  ;;; Commentary:
  ;;;
  ;;; This is my personal config worked over with some effort.  The configuration
  ;;; is expected to work both with Emacs opened as a windowed application or
  ;;; opened in a terminal `-nw'.
  ;;;
  ;;; Code:
  ;;;

#+END_SRC

** Packagement management and fetching

First things first, we want to load and use all these cool packages but, it's Emacs so... we have to configure our mechamism for fetching, loading and integrating packages. We will:
- Setup package management with =package.el=
- Install and setup =use-package= for package integration

#+BEGIN_SRC elisp

  ;;
  ;;; Package management
  ;;

#+END_SRC

*** Setup package management with =package.el=

This section sets up Emacs' built-in =package.el= for us so that we can install all the other packages we'll likely need. This is done by adding the ~melpa~ and ~org~ package repositories (in addition to Emacs' built-in ~elpa~).

For information on these 2 additional repositories, see the following:
- ~melpa~ - popular and contains many more packages that the built-in ~elpa~
- ~org~ - offers the latest =org-mode=-related package releases

#+BEGIN_SRC elisp

  (defun my/setup-package-el ()
    "Load and configure `package.el' for melpa and org repositories."
    ;; Load package.el so we can configure it.
    (require 'package)

    ;; Update package sources to include Melpa and Org package repositories
    (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                             ("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")))

    ;; Initialize packages for Emacs versions under 27 since they are initialized
    ;; automatically as of version 27
    (when (< emacs-major-version 27)
      (package-initialize))

    ;; Fetched the latest packages if that has not been done before
    (unless package-archive-contents
      (package-refresh-contents)))

#+END_SRC

*** Setup package management with =straight.el=

This section uses a pure functional package installer =straight.el=. This installer specializes in reproducible builds, and direct git configurability.

#+BEGIN_SRC elisp

  (defun my/setup-straight-el ()
    "Fetch and configure `straight.el' for purely functional package installs."

    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))


    (message "Setup `straight.el'"))

#+END_SRC

*** Install and setup =use-package= for package integration

We've configured our Emacs for acquiring cool packages. We should be all done then, right? Just start installing packages and using them? Well, we could. If we did though, we would quickly find ourselves a lot of similar code like this:

#+BEGIN_SRC elisp :tangle nil

  (unless (package-installed-p 'my-cool-widget)
    (package-install 'my-cool-widget))
  (require 'my-cool-widget)
  (setq my-cool-widget-param-a t)

  (unless (package-installed-p 'trendy-lib)
    (package-install 'trendy-lib))
  (require 'trendy-lib)
  (global-set-key (kbd "RET") (lambda () nil))

#+END_SRC

While this offers us fine-grained control on how everything is loaded and configured, it also leaves us with a fair bit of redundancy, and painfully ignores the emergent practice of installing and integrating packages. Enter =use-package=.

#+BEGIN_SRC elisp

  (defun my/setup-use-package ()
    "Install and configure `use-package' for loading and configuring packages."
    (interactive)

    ;; Install `use-package' for installing packages in a declarative way.
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    ;; Require `use-package' immediately since we use it later to install
    ;; packages.
    (require 'use-package)

    ;; Configure `use-package' to always ensure successful setup by default.
    (setq use-package-always-ensure t)

    (message "Setup use-package"))

#+END_SRC

** Styling and display
*** Provide some sane defaults for a /modern/ look and feel

By defualt, Emacs looks quite dated. Colors, fonts and themes are all quite basic, alongside with button iconography in the GUI menu. To give it a chance to shine in a world of HTML-rendered editors, we need some saner defaults.

#+BEGIN_SRC elisp

  (defun my/set-sane-defaults ()
    "Setup sane defaults for a /modern/-looking Emacs."
    (interactive)

    ;; Remove the default Emacs splash screen on startup.
    (setq inhibit-startup-message t)

    ;; Increase the default buffer padding a little.
    (set-fringe-mode 10)

    ;; Remove the menu bar (e.g.: `File', `Edit', etc.) as we have key bindings
    ;; for everything we need.
    (menu-bar-mode -1)

    ;; Disable the computer beep from Emacs in favor of a visual flash instead.
    (setq visible-bell t)

    ;; Use a vertical bar `|' as a cursor.
    (setq-default cursor-type 'bar))

#+END_SRC

*** Configure UI options for the GUI interface

- [ ] Consider only applying line spacing to programming modes as it may make shells and other buffers look a little strange. Fancy =zsh= prompts for instance don't look quite as nice when affected by this setting.

#+BEGIN_SRC elisp

  ;; Custom function to setup GUI Emacs settings
  (defun my/configure-graphic-display ()
    "Configure Emacs to run with graphic settings."
    (interactive)

    ;; Set the selected frame to fullscreen.
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    ;; Set frames to be fullscreen by default.
    (add-to-list 'default-frame-alist '(fullscreen . maximized))

    ;; Disable various GUI features we don't need since we're relying on bindings.
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)

    ;; Add a little breathing room between lines for most full-height fonts.
    (setq-default line-spacing 0.2)
    (message "Configured UI options for the GUI interface"))

#+END_SRC

*** Configure UI options for the TTY int erface

Sometimes, we may need to use emacs in a terminal, such as remotely accessing our machine through SSH or accessing a machine through SSH and using Emacs there. For such cases, it's useful to set up Emacs specifically for such an interface, making it more terminal-friendly and avoiding any configurations that are unnecessary in such an environment.

#+BEGIN_SRC elisp

  ;; Custom function to setup terminal Emacs settings
  (defun my/configure-tty-display ()
    "Configure Emacs to run with TTY display settings."
    (interactive)

    ;; If the frame is viewed in a terminal, enable XTerm mouse capabilities such
    ;; as scrolling, clicking, etc. It's note strictly necessary but is very
    ;; convenient when still unfamiliar with many key bindings.
    (xterm-mouse-mode 1)
    (message "COnfigured UI options for the TTY interface"))

#+END_SRC

** Final hurrah!

#+BEGIN_SRC elisp

  (message "Goliath online!")

#+END_SRC

** Mandatory footer

#+BEGIN_SRC elisp

  (provide 'my-emacs-config)
  ;;; my-emacs-config.el ends here

#+END_SRC

* Git configuration
:PROPERTIES:
:header-args: :results silent :tangle "./my_git_config.conf"
:END:

A few items remain to be added to this 
- [ ] Use emacs as editor

#+BEGIN_SRC conf

  #
  # This Git configuration was generated by My Machine Life
  #

#+END_SRC

#+BEGIN_SRC conf

  [commit]
    gpgSign = true

  [core]
    editor = code --wait

  [init]
    defaultBranch = main

  [tag]
    gpgSign = true

  [user]
    name = Nicholas Gelinas
    email = nick.gelinas@gmail.com
    signingKey = DB506578
    
#+END_SRC

* Tmux configuration
:PROPERTIES:
:header-args: :result silent :tangle "./my-tmux.conf"
:END:

#+BEGIN_SRC conf

    set -g mouse on

    # Enable powerline daemon (not required if already started in session)
    # run-shell "powerline-daemon --quiet"

    # Enable powerline bindings for Tmux
    source "${POWERLINE_PATH}/powerline/bindings/tmux/powerline.conf"

    # bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel \
    # "xclip -i -f -selection primary | xclip -i -selection clipboard

    # Remap prefix from 'C-b' to 'C-a'
    unbind C-b
    set-option -g prefix C-a
    bind-key C-a send-prefix

    # Set default terminal color scheme to screen-256color which correctly renders
    # color codes in bash prompt
    set -g default-terminal "screen-256color"

    # Increase the global message limit to 10,000 from 100
    set -g message-limit 10000
    set -g history-limit 10000

    # Set starting index for windows and panes to 1 instead of 0
    set -g base-index 1
    set -g pane-base-index 1

    # Enable keyboard pane navigation
    bind -n M-Left select-pane -L
    bind -n M-Right select-pane -R
    bind -n M-Up select-pane -U
    bind -n M-Down select-pane -D

    bind -n S-Left previous-window
    bind -n S-Right next-window
 
#+END_SRC
